from aiogram import Bot, Dispatcher, executor, types
import markup as mark

from data import data_list
from main import Parsing
token = data_list['token']
days_to_check = ['üìÖ -> –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'üìÖ -> –í—Ç–æ—Ä–Ω–∏–∫', 'üìÖ -> –°—Ä–µ–¥–∞', 'üìÖ -> –ß–µ—Ç–≤–µ—Ä–≥', 'üìÖ -> –ü—è—Ç–Ω–∏—Ü–∞', 'üìÖüìÖ -> –í—Å—è –Ω–µ–¥–µ–ª—è']
weak_to = 'None'

# Initialize bot and dispatcher
bot = Bot(token=token)
dp = Dispatcher(bot)
pars = Parsing()



# Functions
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç Kem`a\n–í—ã–±–µ—Ä–∏ —Å –∫–∞–∫–æ–π –Ω–µ–¥–µ–ª–∏ –≤–∑—è—Ç—å –¥–∑", reply_markup=mark.main_menu)


@dp.message_handler()
async def main_functions(message: types.Message):
	if message.text == 'üìö -> –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è':
		weak_to = message.text[5:]
		pars.get_weak(weak_to)
		await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', reply_markup=mark.select_menu)

	elif message.text == 'üìö -> –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è':
		weak_to = message.text[5:]
		pars.get_weak(weak_to)
		await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', reply_markup=mark.select_menu)

	elif message.text == '‚¨ÖÔ∏è‚¨ÖÔ∏è –ü—Ä–æ—à–ª–æ–µ –º–µ–Ω—é':
		await bot.send_message(message.from_user.id, '–û–∫–µ–π', reply_markup=mark.main_menu)




	#for pars
	elif message.text in days_to_check[:5]:
		day = message.text[5:].lower()
		await bot.send_message(message.from_user.id, f'–û–∫–µ–π –≤–æ–∑—å–º—É –¥–∑ –∑–∞ {day}\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç–∞')
		pars.get_day(day)
		days, hometasks = pars.main_method('https://cop.admhmao.ru/')		

		flag = -1
		w_day = {
			'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
			'–≤—Ç–æ—Ä–Ω–∏–∫': 1,
			'—Å—Ä–µ–¥–∞': 2,
			'—á–µ—Ç–≤–µ—Ä–≥': 3,
			'–ø—è—Ç–Ω–∏—Ü–∞': 4
		}
		true_day = w_day[day.lower()]

		await bot.send_message(message.from_user.id, days[true_day])
		for h in hometasks:
			if h[-2] == '2':
				flag += 1

			if flag == true_day:
				homework = ' '.join(hometasks[h])
				await bot.send_message(message.from_user.id, f'{h[:-1]}: {homework}')

			else: continue		


	elif message.text == days_to_check[5]:
		day = message.text[6:].lower()
		await bot.send_message(message.from_user.id, f'–û–∫–µ–π –≤–æ–∑—å–º—É –¥–∑ –∑–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç–∞')
		pars.get_day(day)
		days, hometasks = pars.main_method('https://cop.admhmao.ru/')

		flag = 0
		for h in hometasks:
			if h[-2] == '2':
				await bot.send_message(message.from_user.id, days[flag] + '\n')
				flag += 1

			homework = ' '.join(hometasks[h])
			await bot.send_message(message.from_user.id, f'{h[:-1]}: {homework}')		


	else:
		await bot.send_message(message.from_user.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')


# Run bot
if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)




def run(check_week, day, days, hometasks):
	if check_week:
		flag = 0
		for h in hometasks:
			if h[-2] == '2':
				print(days[flag] + '\n')
				flag += 1

			homework = ' '.join(hometasks[h])
			print(f'{h[:-1]}: {homework}')
	else:
		flag = -1
		w_day = {
			'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
			'–≤—Ç–æ—Ä–Ω–∏–∫': 1,
			'—Å—Ä–µ–¥–∞': 2,
			'—á–µ—Ç–≤–µ—Ä–≥': 3,
			'–ø—è—Ç–Ω–∏—Ü–∞': 4
		}
		true_day = w_day[day.lower()]

		print(days[true_day])
		for h in hometasks:
			if h[-2] == '2':
				flag += 1

			if flag == true_day:
				homework = ' '.join(hometasks[h])
				print(f'{h[:-1]}: {homework}')

			else: continue		
